# Generated by Django 4.2.13 on 2025-07-01 13:54

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(help_text='Stock Keeping Unit', max_length=255, unique=True, verbose_name='SKU')),
                ('asin', models.CharField(blank=True, help_text='Amazon Standard Identification Number', max_length=50, null=True, verbose_name='ASIN')),
                ('fnsku', models.CharField(blank=True, help_text='Fulfillment Network SKU', max_length=50, null=True, verbose_name='FNSKU')),
                ('ean', models.CharField(blank=True, help_text='European Article Number', max_length=13, null=True, verbose_name='EAN')),
                ('title', models.CharField(max_length=500, verbose_name='Titolo prodotto')),
                ('brand', models.CharField(blank=True, max_length=200, null=True, verbose_name='Brand')),
                ('condition', models.CharField(choices=[('New', 'Nuovo'), ('Used', 'Usato'), ('Refurbished', 'Ricondizionato')], default='New', max_length=50, verbose_name='Condizione')),
                ('length_mm', models.PositiveIntegerField(blank=True, null=True, verbose_name='Lunghezza (mm)')),
                ('width_mm', models.PositiveIntegerField(blank=True, null=True, verbose_name='Larghezza (mm)')),
                ('height_mm', models.PositiveIntegerField(blank=True, null=True, verbose_name='Altezza (mm)')),
                ('weight_gm', models.PositiveIntegerField(blank=True, null=True, verbose_name='Peso (g)')),
                ('current_stock', models.PositiveIntegerField(default=0, verbose_name='Stock attuale')),
                ('minimum_stock', models.PositiveIntegerField(default=0, help_text='Soglia sotto la quale si considera necessario il rifornimento', verbose_name='Stock minimo')),
                ('optimal_stock', models.PositiveIntegerField(default=0, help_text='Quantità ideale da mantenere in magazzino', verbose_name='Stock ottimale')),
                ('cost_per_unit', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Costo unitario')),
                ('sales_velocity', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Velocità vendite (unità/mese)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Attivo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creato il')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aggiornato il')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Note')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Creato da')),
            ],
            options={
                'verbose_name': 'Prodotto',
                'verbose_name_plural': 'Prodotti',
                'ordering': ['brand', 'title'],
            },
        ),
        migrations.CreateModel(
            name='RifornimentoRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_number', models.CharField(help_text='Generato automaticamente', max_length=50, unique=True, verbose_name='Numero richiesta')),
                ('title', models.CharField(max_length=200, verbose_name='Titolo richiesta')),
                ('status', models.CharField(choices=[('draft', 'Bozza'), ('pending', 'In attesa'), ('approved', 'Approvata'), ('ordered', 'Ordinata'), ('shipped', 'Spedita'), ('received', 'Ricevuta'), ('cancelled', 'Annullata')], default='draft', max_length=20, verbose_name='Stato')),
                ('priority', models.CharField(choices=[('low', 'Bassa'), ('normal', 'Normale'), ('high', 'Alta'), ('urgent', 'Urgente')], default='normal', max_length=20, verbose_name='Priorità')),
                ('request_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Data richiesta')),
                ('needed_by', models.DateField(blank=True, help_text='Data entro cui è necessario ricevere i prodotti', null=True, verbose_name='Necessario entro')),
                ('approved_date', models.DateTimeField(blank=True, null=True, verbose_name='Data approvazione')),
                ('order_date', models.DateTimeField(blank=True, null=True, verbose_name='Data ordine')),
                ('expected_delivery', models.DateField(blank=True, null=True, verbose_name='Consegna prevista')),
                ('actual_delivery', models.DateField(blank=True, null=True, verbose_name='Consegna effettiva')),
                ('supplier', models.CharField(blank=True, max_length=200, null=True, verbose_name='Fornitore')),
                ('supplier_reference', models.CharField(blank=True, max_length=100, null=True, verbose_name='Riferimento fornitore')),
                ('total_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo totale')),
                ('shipping_cost', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Costo spedizione')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Note')),
                ('internal_notes', models.TextField(blank=True, null=True, verbose_name='Note interne')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creato il')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aggiornato il')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_rifornimenti', to=settings.AUTH_USER_MODEL, verbose_name='Approvato da')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rifornimento_requests', to=settings.AUTH_USER_MODEL, verbose_name='Richiesto da')),
            ],
            options={
                'verbose_name': 'Richiesta di Rifornimento',
                'verbose_name_plural': 'Richieste di Rifornimento',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RifornimentoItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantità richiesta')),
                ('quantity_approved', models.PositiveIntegerField(blank=True, null=True, verbose_name='Quantità approvata')),
                ('quantity_ordered', models.PositiveIntegerField(blank=True, null=True, verbose_name='Quantità ordinata')),
                ('quantity_received', models.PositiveIntegerField(default=0, verbose_name='Quantità ricevuta')),
                ('unit_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Costo unitario')),
                ('total_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Costo totale')),
                ('reason', models.TextField(blank=True, null=True, verbose_name='Motivazione richiesta')),
                ('priority_notes', models.TextField(blank=True, null=True, verbose_name='Note priorità')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creato il')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aggiornato il')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rifornimento_items', to='rifornimento.product', verbose_name='Prodotto')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='rifornimento.rifornimentorequest', verbose_name='Richiesta')),
            ],
            options={
                'verbose_name': 'Elemento Rifornimento',
                'verbose_name_plural': 'Elementi Rifornimento',
                'ordering': ['request', 'product'],
            },
        ),
        migrations.AddIndex(
            model_name='rifornimentorequest',
            index=models.Index(fields=['status', '-created_at'], name='riforniment_status_4f09f7_idx'),
        ),
        migrations.AddIndex(
            model_name='rifornimentorequest',
            index=models.Index(fields=['priority', '-created_at'], name='riforniment_priorit_7202ee_idx'),
        ),
        migrations.AddIndex(
            model_name='rifornimentorequest',
            index=models.Index(fields=['requested_by', '-created_at'], name='riforniment_request_ea565a_idx'),
        ),
        migrations.AddIndex(
            model_name='rifornimentorequest',
            index=models.Index(fields=['request_number'], name='riforniment_request_7cd14f_idx'),
        ),
        migrations.AddIndex(
            model_name='rifornimentoitem',
            index=models.Index(fields=['request', 'product'], name='riforniment_request_22b2fa_idx'),
        ),
        migrations.AddIndex(
            model_name='rifornimentoitem',
            index=models.Index(fields=['product', '-created_at'], name='riforniment_product_acf069_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='rifornimentoitem',
            unique_together={('request', 'product')},
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['sku'], name='riforniment_sku_1c55ea_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['asin'], name='riforniment_asin_549467_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['brand'], name='riforniment_brand_d3fd5e_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['is_active', '-updated_at'], name='riforniment_is_acti_ef79f1_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['current_stock'], name='riforniment_current_e8a6bc_idx'),
        ),
    ]
