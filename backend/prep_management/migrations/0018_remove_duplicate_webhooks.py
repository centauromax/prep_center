# Generated by Django 4.2.13 on 2025-06-13 17:37

from django.db import migrations

def recreate_table_without_duplicates(apps, schema_editor):
    """
    Ricrea la tabella ShipmentStatusUpdate da zero con il vincolo di unicità già presente.
    Questo approccio è il più sicuro perché:
    1. Crea una nuova tabella con il vincolo già presente
    2. Copia solo i record unici (più recenti)
    3. Rinomina le tabelle
    """
    db_alias = schema_editor.connection.alias
    
    # 1. Crea nuova tabella con il vincolo già presente
    create_new_table = """
    CREATE TABLE prep_management_shipmentstatusupdate_new (
        id SERIAL PRIMARY KEY,
        shipment_id VARCHAR(100),
        event_type VARCHAR(50),
        new_status VARCHAR(50),
        merchant_id VARCHAR(100),
        notes TEXT,
        payload JSONB,
        processed BOOLEAN DEFAULT FALSE,
        signature_verified BOOLEAN,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT unique_webhook_per_shipment_event UNIQUE (shipment_id, event_type, new_status, merchant_id)
    );
    """
    
    # 2. Copia solo i record unici (più recenti) nella nuova tabella
    copy_unique_records = """
    INSERT INTO prep_management_shipmentstatusupdate_new (
        shipment_id, event_type, new_status, merchant_id, notes, payload, processed, signature_verified, created_at
    )
    SELECT DISTINCT ON (shipment_id, event_type, new_status, merchant_id)
        shipment_id, event_type, new_status, merchant_id, notes, payload, processed, signature_verified, created_at
    FROM prep_management_shipmentstatusupdate
    ORDER BY shipment_id, event_type, new_status, merchant_id, created_at DESC;
    """
    
    # 3. Rinomina le tabelle
    rename_tables = """
    ALTER TABLE prep_management_shipmentstatusupdate RENAME TO prep_management_shipmentstatusupdate_old;
    ALTER TABLE prep_management_shipmentstatusupdate_new RENAME TO prep_management_shipmentstatusupdate;
    """
    
    # 4. Elimina la vecchia tabella
    drop_old_table = """
    DROP TABLE prep_management_shipmentstatusupdate_old;
    """
    
    # Esegui le query in sequenza
    schema_editor.execute(create_new_table)
    schema_editor.execute(copy_unique_records)
    schema_editor.execute(rename_tables)
    schema_editor.execute(drop_old_table)

class Migration(migrations.Migration):

    dependencies = [
        ('prep_management', '0017_handle_duplicate_webhooks'),
    ]

    operations = [
        migrations.RunPython(recreate_table_without_duplicates),
    ]
