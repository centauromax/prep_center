# Generated by Django 4.2.13 on 2025-06-13 19:45 - Force remove all constraints

from django.db import migrations

def force_remove_all_constraints(apps, schema_editor):
    """
    Rimuove tutti i possibili constraint che potrebbero causare problemi.
    Questa è una migrazione di emergenza per PostgreSQL.
    """
    db_alias = schema_editor.connection.alias
    
    # Solo per PostgreSQL
    if schema_editor.connection.vendor == 'postgresql':
        # Lista di tutti i possibili nomi di constraint da rimuovere
        constraint_names = [
            'unique_webhook_per_shipment_event',
            'prep_management_shipmentstatusupdate_unique_webhook_per_shipment_event',
            'prep_management_shipmentstatusupdate_shipment_id_event_type_new_status_merchant_id_uniq',
        ]
        
        for constraint_name in constraint_names:
            try:
                drop_constraint_sql = f"""
                ALTER TABLE prep_management_shipmentstatusupdate 
                DROP CONSTRAINT IF EXISTS {constraint_name};
                """
                schema_editor.execute(drop_constraint_sql)
                print(f"✅ Constraint {constraint_name} rimosso da PostgreSQL")
            except Exception as e:
                print(f"⚠️ Errore rimozione constraint {constraint_name}: {e}")
        
        # Verifica che non ci siano più constraint unici sulla tabella
        try:
            check_constraints_sql = """
            SELECT constraint_name 
            FROM information_schema.table_constraints 
            WHERE table_name = 'prep_management_shipmentstatusupdate' 
            AND constraint_type = 'UNIQUE';
            """
            with schema_editor.connection.cursor() as cursor:
                cursor.execute(check_constraints_sql)
                remaining_constraints = cursor.fetchall()
                if remaining_constraints:
                    print(f"⚠️ Constraint rimanenti: {remaining_constraints}")
                else:
                    print("✅ Nessun constraint UNIQUE rimanente sulla tabella")
        except Exception as e:
            print(f"⚠️ Errore verifica constraint: {e}")
    else:
        print("ℹ️ Migrazione saltata: non è PostgreSQL")

def reverse_force_remove(apps, schema_editor):
    """
    Reverse operation - non facciamo nulla
    """
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('prep_management', '0021_emergency_remove_constraint'),
    ]

    operations = [
        migrations.RunPython(force_remove_all_constraints, reverse_force_remove),
    ]
