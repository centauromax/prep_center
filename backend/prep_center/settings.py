"""
Django settings for prep_center project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

# Prep Center Version
VERSION = "6.1"

import os
from pathlib import Path
import dj_database_url
from django.utils.translation import gettext_lazy as _
import sys
from dotenv import load_dotenv


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = '/media/'

# Aggiungi la directory libs al percorso Python
sys.path.insert(0, str(BASE_DIR))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-9v@671$o(2p^ig7sfk%t@lp(f_hj-cl(+m!^772o5ysjd(@mj#'

# SECURITY WARNING: don't run with debug turned on in production!
# In produzione, DEBUG deve essere False
# In sviluppo, DEBUG pu√≤ essere True
DEBUG = os.getenv('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = [
    os.environ.get("RAILWAY_STATIC_URL", ""),  # dominio railway se definito
    "prepcenter-production.up.railway.app",  # dominio Railway principale
    "backend.fbaprepcenteritaly.com",  # dominio personalizzato (se configurato)
    "apppc.fbaprepcenteritaly.com",  # dominio personalizzato (se configurato)
    "127.0.0.1",
    "localhost",
    "*.up.railway.app",  # per sicurezza, accetta tutti i sottodomini railway
]

# Configurazione CSRF per consentire richieste da altri domini
CSRF_TRUSTED_ORIGINS = [
    "https://prepcenter-production.up.railway.app",  # dominio Railway principale
    "https://backend.fbaprepcenteritaly.com",  # dominio personalizzato (se configurato)
    "https://apppc.fbaprepcenteritaly.com",  # dominio personalizzato (se configurato)
    "https://*.up.railway.app",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin-allow-popups'
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Terze parti
    'rest_framework',
    'corsheaders',
    # App Prep Center
    'return_management',
    'fbasaving',
    'prep_management',
    'picture_check',
    'pallet_label',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'prep_center.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'prep_center.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        default='sqlite:///db.sqlite3',
        conn_max_age=600
    )
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Rome'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# URL del dominio React fornito da Railway
REACT_DOMAIN = os.getenv("REACT_DOMAIN", "")

# STATIC_URL deve puntare sempre al backend Django per l'admin
STATIC_URL = "/static/"

# Directory per i file statici del backend (admin, etc.)
STATIC_ROOT = BASE_DIR / "static"

# Configurazione WhiteNoise per servire file statici
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

STATICFILES_DIRS = []  # Nessuna directory aggiuntiva, tutto va in STATIC_ROOT

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Pagina di login
# LOGIN_URL = 'login'  # Commentato per evitare redirect automatici

# Definizione delle lingue disponibili
LANGUAGES = [
    ('it', _('Italiano')),
    ('en', _('English')),
]

USE_I18N = True
USE_L10N = True

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

# Definisci il percorso per i log
import tempfile
LOG_DIR = os.path.join(tempfile.gettempdir(), 'logs')
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'truncate_long_messages': {
            '()': 'prep_center.logging_filters.TruncatingLogFilter',
            'max_length': 1000,
        }
    },
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'filters': ['truncate_long_messages'],
        },
        'django_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'django.log'),
            'formatter': 'verbose',
            'mode': 'a',
            'filters': ['truncate_long_messages'],
        },
        'fbasaving_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'fbasaving.log'),
            'formatter': 'verbose',
            'mode': 'a',
            'filters': ['truncate_long_messages'],
        },
        'picture_check_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'picture_check.log'),
            'formatter': 'verbose',
            'mode': 'a',
            'filters': ['truncate_long_messages'],
        },
        'prep_business_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'prep_business.log'),
            'formatter': 'verbose',
            'mode': 'a',
            'filters': ['truncate_long_messages'],
        },
        'prep_management_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'prep_management.log'),
            'formatter': 'verbose',
            'mode': 'a',
            'filters': ['truncate_long_messages'],
        }
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'django_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'fbasaving': {
            'handlers': ['console', 'fbasaving_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'picture_check': {
            'handlers': ['console', 'picture_check_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'prep_business': {
            'handlers': ['console', 'prep_business_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'prep_management': {
            'handlers': ['console', 'prep_management_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Aggiungi questa funzione per gestire il reindirizzamento dinamicamente
def get_redirect_url(request):
    current_app = request.path.split('/')[1]  # Prende il nome dell'app corrente dall'URL
    return f'/{current_app}/'

# Oppure, se preferisci mantenere l'utente nella stessa pagina
LANGUAGE_COOKIE_NAME = 'django_language'
LANGUAGE_COOKIE_PATH = '/'
LANGUAGE_COOKIE_DOMAIN = None
LANGUAGE_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SAMESITE = 'Lax'

# Configurazione Email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'mail.zacideas.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'info@zacideas.com'
EMAIL_HOST_PASSWORD = 's9Y#&3In$o'
# Configurazioni aggiuntive per le email
DEFAULT_FROM_EMAIL = 'FbaPrepCenterItaly <info@fbaprepcenteritaly.com>'
CONTACT_EMAIL = 'info@fbaprepcenteritaly.com'

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "https://prepcenter-production.up.railway.app",  # dominio Railway backend
    "https://backend.fbaprepcenteritaly.com",  # dominio Django backend
    "https://apppc.fbaprepcenteritaly.com",  # dominio React frontend
    "http://localhost:3000",  # sviluppo React
    "http://localhost:8000",  # sviluppo Django
]

# Celery configuration
CELERY_BROKER_URL = os.environ.get("REDIS_URL") or os.environ.get("CELERY_BROKER_URL") or "redis://localhost:6379/0"
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True

# =============================================================================
# CONFIGURAZIONE TELEGRAM BOT
# =============================================================================

# Token del bot Telegram (da configurare nelle variabili d'ambiente)
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')

# URL webhook Telegram (configurato automaticamente)
TELEGRAM_WEBHOOK_URL = os.environ.get('TELEGRAM_WEBHOOK_URL')

# Log della configurazione Telegram
if TELEGRAM_BOT_TOKEN:
    print(f"‚úÖ Bot Telegram configurato: {TELEGRAM_BOT_TOKEN[:10]}...")
else:
    print("‚ö†Ô∏è  Token Telegram non configurato (TELEGRAM_BOT_TOKEN)")

# =============================================================================
# FINE CONFIGURAZIONI
# =============================================================================
